%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Eight queens problem
%% We have known that the rules of rook, bishop, queen can be combination of straight, diagonal. And we want to find the rule of each role.

:- module(test,[abduce_consistent_insts/1, chess/3, abduce_consistent_inst/3, eval_chess_label_insts/1, eval_chess/1]).

:- use_module(library(chr)).
:- chr_constraint chess/3. 


%%(x,y,type)
%% x,y : [0,7]    type : [0,2]
%% straight : X1=:=X2;Y1=:=Y2
%% diagonal : X1-X2=:=Y1-Y2;X1-X2=:=Y2-Y1

%% If return false, it conflicts.
%% Can be used to learn type. But there are only three types of chess and three types of rules, so we don't use metagol now.
chess(X1,Y1,0), chess(X2,Y2,_) ==> (X1=:=X2;Y1=:=Y2) | fail.
chess(X1,Y1,1), chess(X2,Y2,_) ==> (X1-X2=:=Y1-Y2;X1-X2=:=Y2-Y1) | fail.
chess(X1,Y1,2), chess(X2,Y2,_) ==> (X1=:=X2;Y1=:=Y2;X1-X2=:=Y1-Y2;X1-X2=:=Y2-Y1) | fail.

call_and_undo(X) :- (((call(X)->fail;Y=fail));Y=true),!,(Y->true;fail).
% caller(X,Y) :- ((call(X)->fail;Y=fail));Y=true. %%For concurrent_maplist


%% eval_chess_label_insts([[[[4,0,0], [6,1,0]],true], [[[1, 1, 2], [3, 3, 2]], false], [[[1, 0, 2], [2, 2, 0]], true], [[[2, 1, 1], [0, 2, 0]], true] ]).
eval_chess_label_insts([]).
eval_chess_label_insts([Parameter|Parameters]):-
    Fun =.. [eval_chess_label|Parameter],
    %writeln(Fun),
    call(Fun),
    eval_chess_label_insts(Parameters).

%% eval_chess_label([[4,0,0], [6,1,0], [1,2,0], [3,3,1], [5,3,1], [3,6,1], [7,4,2], [0,5,2]],true).
eval_chess_label(Ex,Label):-
    ground(Ex),
    add_chess(Ex,ChessExs),
    list_to_conj(ChessExs,ChessExsConj),
    (Label -> call_and_undo(ChessExsConj) ; (\+ call_and_undo(ChessExsConj))).
    
%% eval_chess([[4,0,0], [6,1,0], [1,2,0], [3,3,1], [5,3,1], [3,6,1], [7,4,2], [0,5,2]]).
eval_chess(Ex):-
    ground(Ex),
    (add_chess(Ex,ChessEx),
    list_to_conj(ChessEx,ChessExConj)),
    call(ChessExConj).


% abduce_consistent_insts([[[[1, 1, 2], [3, 3, 2]], [], false], [[[1, 0, 2], [2, 2, 0]], [], true], [[[2, 1, 1], [0, 2, 0]], [], true]]).
% abduce_consistent_insts([[[[4,0,0], [6,1,0], [1,2,0], [3,3,1], [5,3,1], [3,6,X], [7,4,2], [0,5,2]],[X],true] ]).
abduce_consistent_insts([Parameter|Parameters]):-
    Fun =.. [abduce_consistent_inst|Parameter],
    %writeln(Fun),
    call(Fun),
    abduce_consistent_insts(Parameters).
abduce_consistent_insts([]).

abduce_consistent_inst(Exs,Vars,Label):-
    assign(Vars),
    eval_chess_label(Exs,Label).


add_chess([],[]).   
add_chess([Ex|Exs],[ChessEx|ChessExs]):-
    ChessEx =..[chess|Ex],
    add_chess(Exs,ChessExs).

% convert a list of term to a conjunction
list_to_conj([H], H) :- !.
list_to_conj([H | T], ','(H, Conj)) :-
    list_to_conj(T, Conj).
    
assign([]).
assign([Var|Vars]):-
  member(Var,[2,1,0]),
  assign(Vars). 


% [_1,_2,_3,_4]
%add_member([Var|Vars],[Member_re|Member_res]):-
%    Member_re =..[member,Var,[2,1,0]],
%    add_member(Vars,Member_res).
%add_member([],[]).
